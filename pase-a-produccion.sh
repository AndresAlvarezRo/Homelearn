#!/usr/bin/env bash
set -euo pipefail

# === Config ===
SRC_BRANCH="develop"
DST_BRANCH="main"

# === Helpers ===
abort() { echo "‚ùå $*" >&2; exit 1; }

need() { command -v "$1" >/dev/null 2>&1 || abort "No se encontr√≥ '$1' en PATH."; }

# === Prechequeos ===
need git
need docker

# Workspace limpio
if ! git diff --quiet || ! git diff --cached --quiet; then
  abort "Hay cambios sin commitear. Commit/stash antes de ejecutar."
fi

# Remoto y owner/repo
REMOTE="$(git remote get-url --push origin 2>/dev/null || git remote get-url origin 2>/dev/null || true)"
[[ -n "$REMOTE" && "$REMOTE" == *github.com* ]] || abort "No pude detectar remoto GitHub 'origin'."

OWNER="$(printf '%s' "$REMOTE" | sed -E 's#.*github\.com[:/]+([^/]+)/([^/.]+)(\.git)?$#\1#')"
REPO="$(printf '%s' "$REMOTE" | sed -E 's#.*github\.com[:/]+([^/]+)/([^/.]+)(\.git)?$#\2#')"
OWNER_LC="$(printf '%s' "$OWNER" | tr '[:upper:]' '[:lower:]')"
REPO_LC="$(printf '%s' "$REPO" | tr '[:upper:]' '[:lower:]')"

FRONT_REPO="ghcr.io/${OWNER_LC}/${REPO_LC}/frontend"
BACK_REPO="ghcr.io/${OWNER_LC}/${REPO_LC}/backend"

echo "üì¶ Repo Git: ${OWNER}/${REPO}"
echo "üåø Merge: ${SRC_BRANCH} ‚ûú ${DST_BRANCH}"
echo "üñºÔ∏è  Im√°genes GHCR: "
echo "    - ${FRONT_REPO}:develop ‚Üí :integration"
echo "    - ${BACK_REPO}:develop  ‚Üí :integration"
echo

# === GIT: merge develop -> main ===
echo "‚û°Ô∏è  Git fetch/prune"
git fetch origin --prune

git rev-parse --verify "origin/${SRC_BRANCH}" >/dev/null 2>&1 || abort "No existe origin/${SRC_BRANCH}"
git rev-parse --verify "origin/${DST_BRANCH}" >/dev/null 2>&1 || abort "No existe origin/${DST_BRANCH}"

echo "‚û°Ô∏è  Alinear ramas locales con remotas (FF-only)"
# prepare develop
if git show-ref --verify --quiet "refs/heads/${SRC_BRANCH}"; then
  git checkout "${SRC_BRANCH}"
else
  git checkout -t "origin/${SRC_BRANCH}"
fi
git pull --ff-only origin "${SRC_BRANCH}"

# prepare main
if git show-ref --verify --quiet "refs/heads/${DST_BRANCH}"; then
  git checkout "${DST_BRANCH}"
else
  git checkout -t "origin/${DST_BRANCH}"
fi
git pull --ff-only origin "${DST_BRANCH}"

echo "‚û°Ô∏è  Merge ${SRC_BRANCH} ‚Üí ${DST_BRANCH}"
# Intento de merge con commit mensaje est√°ndar (falla en conflicto)
git merge --no-ff -m "chore(prod): merge ${SRC_BRANCH} into ${DST_BRANCH} [pase-a-produccion]" "${SRC_BRANCH}"

echo "‚û°Ô∏è  Push a origin/${DST_BRANCH}"
git push origin "${DST_BRANCH}"
echo "‚úÖ Merge & push OK"
echo

# === DOCKER: retag develop -> integration en GHCR ===
retag_push() {
  local image_repo="$1"
  local from_tag="develop"
  local to_tag="integration"

  echo "üîé Verificando tag remoto: ${image_repo}:${from_tag}"
  if ! docker manifest inspect "${image_repo}:${from_tag}" >/dev/null 2>&1; then
    abort "No existe ${image_repo}:${from_tag} en GHCR (login o push previo requerido)."
  fi

  echo "‚¨áÔ∏è  Pull ${image_repo}:${from_tag}"
  docker pull "${image_repo}:${from_tag}"

  echo "üè∑Ô∏è  Tag -> ${image_repo}:${to_tag}"
  docker tag "${image_repo}:${from_tag}" "${image_repo}:${to_tag}"

  echo "‚¨ÜÔ∏è  Push ${image_repo}:${to_tag}"
  docker push "${image_repo}:${to_tag}"

  echo "‚úÖ Listo: ${image_repo}:${to_tag}"
  echo
}

echo "‚û°Ô∏è  Reetiquetando im√°genes GHCR a :integration"
retag_push "${FRONT_REPO}"
retag_push "${BACK_REPO}"

echo "üéâ Pase a producci√≥n finalizado."
echo "   - ${FRONT_REPO}:integration"
echo "   - ${BACK_REPO}:integration"
